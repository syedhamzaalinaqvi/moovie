1. First, replace the login modal HTML in your index.html with this:

```html
<!-- Login Modal -->
<div class="modal" id="loginModal">
    <div class="modal-overlay" id="loginOverlay"></div>
    <div class="modal-content login-modal-content">
        <button class="modal-close" id="loginModalClose">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <div class="login-form">
            <h2 id="authTitle">Login to H-TV</h2>
            <form id="authForm">
                <div class="form-group">
                    <input type="email" id="authEmail" placeholder="Email" required>
                </div>
                <div class="form-group">
                    <input type="password" id="authPassword" placeholder="Password" required>
                </div>
                <button type="submit" class="login-submit-btn" id="authSubmitBtn">Sign In</button>
                <div class="or-divider">
                    <span>OR</span>
                </div>
                <button type="button" class="google-sign-in-btn" id="googleSignInBtn">
                    <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google">
                    Sign in with Google
                </button>
            </form>
            <p class="login-footer">
                <span id="authSwitchText">Don't have an account?</span>
                <a href="#" id="authToggleBtn">Sign up</a>
            </p>
        </div>
    </div>
</div>

2. Add these styles to your existing <style> tag:

```css
/* Login Form Styles */
.login-form {
    padding: 2rem;
    background: var(--background, #fff);
    border-radius: 8px;
}

.login-form h2 {
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--text-primary, #333);
}

.form-group {
    margin-bottom: 1rem;
}

.form-group input {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid var(--border-color, #ddd);
    border-radius: 4px;
    background: var(--input-background, #fff);
    color: var(--text-primary, #333);
    transition: border-color 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color, #ff0844);
    outline: none;
}

.login-submit-btn {
    width: 100%;
    padding: 0.8rem;
    background: var(--primary-color, #ff0844);
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s;
}

.login-submit-btn:hover {
    background: var(--primary-color-dark, #cc0636);
}

.login-submit-btn:disabled {
    background: var(--disabled-color, #ccc);
    cursor: not-allowed;
}

.google-sign-in-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 0.8rem;
    background: white;
    color: #757575;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s;
}

.google-sign-in-btn:hover {
    background: #f5f5f5;
}

.google-sign-in-btn img {
    width: 18px;
    height: 18px;
    margin-right: 10px;
}

.or-divider {
    display: flex;
    align-items: center;
    text-align: center;
    margin: 1rem 0;
}

.or-divider::before,
.or-divider::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid var(--border-color, #ddd);
}

.or-divider span {
    padding: 0 10px;
    color: var(--text-muted, #666);
    font-size: 0.9rem;
}

.login-footer {
    margin-top: 1rem;
    text-align: center;
    color: var(--text-muted, #666);
}

.login-footer a {
    color: var(--primary-color, #ff0844);
    text-decoration: none;
    font-weight: 500;
}

.login-footer a:hover {
    text-decoration: underline;
}
```

3. Replace the Firebase Integration script with this:

```javascript
<!-- Firebase Integration -->
<script type="module">
    import { 
        auth, 
        signInWithEmailAndPassword, 
        createUserWithEmailAndPassword,
        signOut,
        GoogleAuthProvider,
        signInWithPopup 
    } from './firebase-config.js';

    // Initialize Google Auth Provider
    const googleProvider = new GoogleAuthProvider();
    
    // UI Elements
    const loginModal = document.getElementById('loginModal');
    const loginOverlay = document.getElementById('loginOverlay');
    const loginModalClose = document.getElementById('loginModalClose');
    const authForm = document.getElementById('authForm');
    const authTitle = document.getElementById('authTitle');
    const authEmail = document.getElementById('authEmail');
    const authPassword = document.getElementById('authPassword');
    const authSubmitBtn = document.getElementById('authSubmitBtn');
    const authToggleBtn = document.getElementById('authToggleBtn');
    const authSwitchText = document.getElementById('authSwitchText');
    const googleSignInBtn = document.getElementById('googleSignInBtn');
    const loginBtn = document.getElementById('loginBtn');

    let isSignUp = false;

    // Show/Hide Modal
    const showModal = () => loginModal.style.display = 'flex';
    const hideModal = () => {
        loginModal.style.display = 'none';
        resetForm();
    };

    // Reset Form
    const resetForm = () => {
        if (authForm) authForm.reset();
        updateFormMode();
    };

    // Update UI based on mode
    const updateFormMode = () => {
        if (authTitle) authTitle.textContent = isSignUp ? 'Create Account' : 'Login to H-TV';
        if (authSubmitBtn) authSubmitBtn.textContent = isSignUp ? 'Sign Up' : 'Sign In';
        if (authSwitchText) authSwitchText.textContent = isSignUp ? 'Already have an account?' : "Don't have an account?";
        if (authToggleBtn) authToggleBtn.textContent = isSignUp ? 'Sign in' : 'Sign up';
    };

    // Show Toast Message
    const showToast = (message, type = 'success') => {
        const toast = document.createElement('div');
        const color = type === 'success' ? '#00cc66' : '#ff0844';
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: linear-gradient(135deg, ${color} 0%, ${type === 'success' ? '#00ff88' : '#ffb199'} 100%);
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 15px ${color}66;
            z-index: 9999;
            font-weight: 600;
            animation: slideIn 0.3s ease;
        `;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    };

    // Update UI based on auth state
    auth.onAuthStateChanged((user) => {
        if (user) {
            if (loginBtn) loginBtn.textContent = 'Logout';
            showToast(`Welcome ${user.email}!`);
        } else {
            if (loginBtn) loginBtn.textContent = 'Login';
        }
    });

    // Event Listeners
    if (loginBtn) {
        loginBtn.addEventListener('click', () => {
            if (auth.currentUser) {
                signOut(auth).then(() => {
                    showToast('Logged out successfully');
                }).catch((error) => {
                    showToast(error.message, 'error');
                });
            } else {
                showModal();
            }
        });
    }

    if (loginModalClose) loginModalClose.addEventListener('click', hideModal);
    if (loginOverlay) loginOverlay.addEventListener('click', hideModal);

    if (authToggleBtn) {
        authToggleBtn.addEventListener('click', (e) => {
            e.preventDefault();
            isSignUp = !isSignUp;
            updateFormMode();
        });
    }

    // Handle Email Authentication
    if (authForm) {
        authForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = authEmail.value;
            const password = authPassword.value;
            
            if (!email || !password) {
                showToast('Please enter email and password', 'error');
                return;
            }
            
            try {
                if (authSubmitBtn) authSubmitBtn.disabled = true;
                
                if (isSignUp) {
                    await createUserWithEmailAndPassword(auth, email, password);
                    showToast('Account created successfully!');
                } else {
                    await signInWithEmailAndPassword(auth, email, password);
                    showToast('Logged in successfully!');
                }
                hideModal();
            } catch (error) {
                console.error('Auth error:', error);
                let message = 'Authentication failed';
                
                switch (error.code) {
                    case 'auth/user-not-found':
                        message = 'Account not found. Please sign up.';
                        break;
                    case 'auth/wrong-password':
                        message = 'Incorrect password. Please try again.';
                        break;
                    case 'auth/email-already-in-use':
                        message = 'Email already in use. Please sign in.';
                        break;
                    case 'auth/weak-password':
                        message = 'Password should be at least 6 characters.';
                        break;
                    case 'auth/invalid-email':
                        message = 'Invalid email address.';
                        break;
                }
                
                showToast(message, 'error');
            } finally {
                if (authSubmitBtn) authSubmitBtn.disabled = false;
            }
        });
    }

    // Handle Google Sign In
    if (googleSignInBtn) {
        googleSignInBtn.addEventListener('click', async () => {
            try {
                await signInWithPopup(auth, googleProvider);
                showToast('Signed in with Google successfully!');
                hideModal();
            } catch (error) {
                console.error('Google Sign In Error:', error);
                showToast('Failed to sign in with Google', 'error');
            }
        });
    }
</script>
```

To implement these changes:

1. Replace your existing login modal HTML with the new one
2. Add the new CSS styles to your existing <style> tag
3. Replace the Firebase Integration script with the new one
4. Remove any duplicate login-related code

The new implementation includes:
- Email/Password authentication
- Google Sign-in
- Toggle between Sign In and Sign Up
- Toast notifications for success/error messages
- Proper form validation
- Loading states
- Error handling
- Automatic UI updates based on auth state
